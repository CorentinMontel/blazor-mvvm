@page "/weather"
@using System.ComponentModel
@using BlazorAppMVVM.Components.ViewModels
@attribute [StreamRendering]
@inject WeatherForecastViewModel ViewModel
@implements IDisposable


<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>
<button class="btn btn-outline-danger" @onclick="ViewModel.FetchWeatherForecast">Refresh</button>
<button class="btn btn-outline-success" @onclick="ViewModel.AddWeatherForecast">Add</button>

@if (ViewModel.IsBusy)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in ViewModel.WeatherForecastModel.Forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private PropertyChangedEventHandler OnPropertyChangedHandler;
    
    protected override async Task OnInitializedAsync()
    {
        // Init OnPropertyChangedHandler
        OnPropertyChangedHandler = async (sender, e) => { 
            await InvokeAsync(StateHasChanged);
        };
        
        ViewModel.PropertyChanged += OnPropertyChangedHandler;
        
        await base.OnInitializedAsync();
        ViewModel.FetchWeatherForecast();
    }

    // Avoid memory leaks with Dispose
    public void Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }
}